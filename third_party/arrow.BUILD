# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Description:
#   Apache arrow library

package(default_visibility = ["//visibility:public"])

# LINT.IfChange(arrow_gen_version)
arrow_version_replace_cmd = ("sed " +
                             "-e 's/@ARROW_VERSION_MAJOR@/6/g' " +
                             "-e 's/@ARROW_VERSION_MINOR@/0/g' " +
                             "-e 's/@ARROW_VERSION_PATCH@/1/g' ")
# LINT.ThenChange(../workspace.bzl:arrow_archive_version)

genrule(
    name = "arrow_util_config",
    srcs = ["cpp/src/arrow/util/config.h.cmake"],
    outs = ["cpp/src/arrow/util/config.h"],
    cmd = (arrow_version_replace_cmd +
           "-e 's/cmakedefine/define/g' " +
           "$< >$@"),
)

genrule(
    name = "parquet_version_h",
    srcs = ["cpp/src/parquet/parquet_version.h.in"],
    outs = ["cpp/src/parquet/parquet_version.h"],
    # Parquet packaged with arrow uses arrow versioning.
    cmd = (arrow_version_replace_cmd +
           "$< >$@"),
)

# These are originally generated by flatbuffers. We use them instead of
# re-generating from fbs files under "format/" and "cpp/src/arrow/ipc/".
fbs_headers = [
    "cpp/src/generated/feather_generated.h",
    "cpp/src/generated/File_generated.h",
    "cpp/src/generated/Message_generated.h",
    "cpp/src/generated/Schema_generated.h",
    "cpp/src/generated/SparseTensor_generated.h",
    "cpp/src/generated/Tensor_generated.h",
]

cc_library(
    name = "arrow",
    srcs = glob(
        [
            "cpp/src/arrow/*.cc",
            "cpp/src/arrow/array/*.cc",
            "cpp/src/arrow/csv/*.cc",
            "cpp/src/arrow/io/*.cc",
            "cpp/src/arrow/util/*.cc",
            "cpp/src/arrow/compute/**/*.cc",
            "cpp/src/arrow/compute/**/*.h",
            "cpp/src/arrow/vendored/optional.hpp",
            "cpp/src/arrow/vendored/string_view.hpp",
            "cpp/src/arrow/vendored/variant.hpp",
            "cpp/src/arrow/vendored/**/*.cpp",
            "cpp/src/arrow/vendored/**/*.hpp",
            "cpp/src/arrow/vendored/**/*.cc",
            "cpp/src/arrow/vendored/**/*.c",
            "cpp/src/arrow/vendored/**/*.h",
            "cpp/src/arrow/ipc/*.cc",
            "cpp/src/arrow/ipc/*.h",
            "cpp/src/arrow/**/*.h",
            "cpp/src/parquet/**/*.h",
            "cpp/src/parquet/**/*.cc",
            "cpp/src/arrow/tensor/*.cc",
            "cpp/src/generated/parquet_types.cpp",
        ],
        exclude = [
            # Excluding files which we don't depend on, but needs
            # additional dependencies like boost, snappy etc.
            "cpp/src/arrow/util/bpacking_avx2.*",
            "cpp/src/arrow/util/bpacking_avx512.*",
            "cpp/src/arrow/util/bpacking_neon*",
            "cpp/src/arrow/util/bpacking_simd*",
            "cpp/src/arrow/util/compression_brotli*",
            "cpp/src/arrow/util/compression_bz2*",
            "cpp/src/arrow/util/compression_lz4*",
            "cpp/src/arrow/util/compression_z*",
            "cpp/src/arrow/util/compression_snappy*",
            "cpp/src/**/*_benchmark.cc",
            "cpp/src/**/*_main.cc",
            "cpp/src/**/*_test.cc",
            "cpp/src/**/*-test.cc",
            "cpp/src/**/test_*.cc",
            "cpp/src/**/*hdfs*.cc",
            "cpp/src/**/*fuzz*.cc",
            "cpp/src/**/file_to_stream.cc",
            "cpp/src/**/stream_to_file.cc",
            "cpp/src/arrow/ipc/json*.cc",
            "cpp/src/arrow/vendored/xxhash/**",
            #"cpp/src/arrow/vendored/datetime/**",
            "cpp/src/parquet/encryption/encryption_internal.cc",
        ],
    ),
    hdrs = [
        # Headers from above genrules.
        "cpp/src/arrow/util/config.h",
        "cpp/src/parquet/parquet_version.h",
        # This is originally generated by thrift compiler. We include the
        # files generated by arrow to avoid requiring the compiler
        # (thrift library is still needed though).
        "cpp/src/generated/parquet_types.h",
    ] + fbs_headers,
    includes = [
        "cpp/src",
        "cpp/src/arrow/vendored/xxhash",
        "cpp/thirdparty/flatbuffers/include",
    ],
    textual_hdrs = [
        "cpp/src/arrow/vendored/xxhash/xxhash.c",
    ],
    deps = [
        ":datetime",
        ":flatbuffers",
        ":xxhash",
        "@thrift",
    ],
)

cc_library(
    name = "xxhash",
    srcs = [],
    hdrs = [
        "cpp/src/arrow/vendored/xxhash/xxhash.c",
        "cpp/src/arrow/vendored/xxhash/xxhash.h",
    ],
    copts = ["-Wno-implicit-fallthrough"],
    includes = ["."],
    visibility = ["//visibility:private"],
)

config_setting(
    name = "windows",
    constraint_values = [
        "@bazel_tools//platforms:windows",
    ],
)

cc_library(
    name = "datetime",
    srcs = [
        "cpp/src/arrow/vendored/datetime/tz.cpp",
    ],
    hdrs = [
        "cpp/src/arrow/vendored/datetime/date.h",
        "cpp/src/arrow/vendored/datetime/ios.h",
        "cpp/src/arrow/vendored/datetime/tz.h",
        "cpp/src/arrow/vendored/datetime/tz_private.h",
        "cpp/src/arrow/vendored/datetime/visibility.h",
    ],
    includes = ["."],
    linkopts = select({
        ":windows": [
            "ole32.lib",  # for CoTaskMemFree
            "shell32.lib",  # for SHGetKnownFolderPath
        ],
        "//conditions:default": [
        ],
    }),
    visibility = ["//visibility:private"],
)

cc_library(
    name = "flatbuffers",
    srcs = [],
    hdrs = [
        "cpp/thirdparty/flatbuffers/include/flatbuffers/base.h",
        "cpp/thirdparty/flatbuffers/include/flatbuffers/flatbuffers.h",
        "cpp/thirdparty/flatbuffers/include/flatbuffers/stl_emulation.h",
    ],
    copts = ["-Wno-implicit-fallthrough"],
    includes = ["."],
    visibility = ["//visibility:private"],
)
