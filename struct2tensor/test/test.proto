/* Copyright 2019 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
==============================================================================*/
// LINT: ALLOW_GROUPS

syntax = "proto2";

package struct2tensor.test;


// Test that all types of simple fields can be converted to prensors.
message AllSimple {
  optional string optional_string = 1;
  optional int32 optional_int32 = 2;
  optional uint32 optional_uint32 = 3;
  optional int64 optional_int64 = 4;
  optional uint64 optional_uint64 = 5;
  optional float optional_float = 6;
  optional double optional_double = 7;
  repeated string repeated_string = 101;
  repeated int32 repeated_int32 = 102;
  repeated uint32 repeated_uint32 = 103;
  repeated int64 repeated_int64 = 104;
  repeated uint64 repeated_uint64 = 105;
  repeated float repeated_float = 106;
  repeated double repeated_double = 107;
}

message MessageWithGroup {
  repeated group GroupField = 1 {
    optional int64 int_val = 1;
    repeated string str_val = 2;
  }
}

message UserInfo {
  optional string gender = 1;
  optional int64 age_in_years = 2;
  repeated string friends = 3;
  // A second field with age in years, to simulate merged fields.
  optional int64 age_in_years_alt = 4;
  extensions 1000 to max;
}

message SpecialUserInfo {
  optional string secret = 1;
}

message LocationOfExtension {
  extend UserInfo {
    optional SpecialUserInfo special_user_info = 188485966;
  }
}

message Action {
  optional int64 number_of_views = 1;
  optional string doc_id = 2;
  repeated string category = 3;
}

message Event {
  optional string event_id = 1;
  optional string query = 2;
  repeated string query_token = 3;
  repeated Action action = 4;
  optional UserInfo user_info = 5;
  repeated bool action_mask = 6;
}

message SessionInfo {
  optional int64 start_time = 1;
  repeated string session_feature = 2;
  optional double session_duration_sec = 3;
}

message Session {
  optional int64 session_id = 1;
  repeated Event event = 2;
  // session_info is added to replicate two grandchildren, both repeated.
  repeated SessionInfo session_info = 3;
}

message Recursion {
  repeated int64 data = 1;
  repeated Recursion recursion = 2;
}

message EmptyMessage {}

message EmptyMessageContainer {
  optional EmptyMessage empty = 1;
}

message HasPackedFields {
  repeated int32 packed_int32 = 1 [packed = true];
  repeated uint32 packed_uint32 = 2 [packed = true];
  repeated int64 packed_int64 = 3 [packed = true];
  repeated uint64 packed_uint64 = 4 [packed = true];
  repeated float packed_float = 5 [packed = true];
  repeated double packed_double = 6 [packed = true];
}
